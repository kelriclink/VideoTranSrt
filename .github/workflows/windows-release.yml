name: Build Windows EXE and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pyinstaller-hooks-contrib

      - name: Build EXE (PyInstaller one-folder, include plugins)
        shell: pwsh
        run: |
          # 生成可执行文件（文件夹形式，包含所有依赖）
          # 入口脚本切换为 GUI：video2srt/gui/main.py；图标位于 video2srt/gui/icon.ico
          pyinstaller --noconfirm --clean `
            --name Video2SRT `
            --icon video2srt/gui/icon.ico `
            --onedir `
            --windowed `
            --add-data "config/default_config.json;config" `
            --add-data "video2srt/plugins;video2srt/plugins" `
            --collect-submodules video2srt `
            --collect-submodules video2srt.plugins `
            --collect-submodules whisper `
            --collect-submodules torch `
            --collect-submodules PyQt6 `
            --collect-submodules yaml `
            --hidden-import yaml `
            --hidden-import yaml._yaml `
            video2srt/gui/main.py

      - name: Download FFmpeg and copy to dist
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $ffmpegUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
          $zipPath = "ffmpeg.zip"
          Write-Host "Downloading FFmpeg from $ffmpegUrl"
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath "ffmpeg" -Force
          $ffmpegExe = Get-ChildItem -Recurse -File ffmpeg | Where-Object { $_.Name -eq "ffmpeg.exe" } | Select-Object -First 1
          $ffprobeExe = Get-ChildItem -Recurse -File ffmpeg | Where-Object { $_.Name -eq "ffprobe.exe" } | Select-Object -First 1
          if (-not $ffmpegExe) { throw "ffmpeg.exe not found in extracted archive" }
          New-Item -ItemType Directory -Force -Path "dist\Video2SRT" | Out-Null
          Copy-Item $ffmpegExe.FullName -Destination "dist\Video2SRT\"
          if ($ffprobeExe) { Copy-Item $ffprobeExe.FullName -Destination "dist\Video2SRT\" }

      - name: List build outputs
        shell: pwsh
        run: |
          Get-ChildItem -Recurse dist\Video2SRT | Format-List

      # 移除手动压缩步骤，避免双层压缩；Artifacts 自带单层压缩

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: Video2SRT-windows
          path: |
            dist/Video2SRT/

  release:
    name: Create GitHub Release
    needs: build-windows
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: Video2SRT-windows
          path: artifact

      - name: List artifact directory
        shell: pwsh
        run: |
          Write-Host "Listing artifact contents:"
          Get-ChildItem -Recurse artifact | Format-List

      - name: Zip folder for release (single compression)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $version = "${{ github.ref_name }}"
          $dest = "artifact/Video2SRT-$version-windows.zip"
          if (Test-Path $dest) { Remove-Item $dest -Force }
          Compress-Archive -Path artifact/Video2SRT-windows/* -DestinationPath $dest
          Write-Host "Created $dest"

      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: "Video2SRT ${{ github.ref_name }}"
          artifacts: artifact/Video2SRT-${{ github.ref_name }}-windows.zip
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ github.token }}